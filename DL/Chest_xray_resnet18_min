{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":23812,"sourceType":"datasetVersion","datasetId":17810}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim\nimport torchvision\nfrom torchvision import datasets, transforms\nimport torchvision.models as models\nfrom torchvision.models import resnet18, ResNet18_Weights\nfrom torch.utils.data import DataLoader, random_split\n\nfrom torchmetrics.classification import Accuracy","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:13.160684Z","iopub.execute_input":"2025-08-17T08:50:13.160849Z","iopub.status.idle":"2025-08-17T08:50:24.014229Z","shell.execute_reply.started":"2025-08-17T08:50:13.160834Z","shell.execute_reply":"2025-08-17T08:50:24.013636Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"device= torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\ndevice","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:24.015293Z","iopub.execute_input":"2025-08-17T08:50:24.015681Z","iopub.status.idle":"2025-08-17T08:50:24.095402Z","shell.execute_reply.started":"2025-08-17T08:50:24.015661Z","shell.execute_reply":"2025-08-17T08:50:24.094684Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"device(type='cuda')"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"train_transform= transforms.Compose([\n    transforms.Resize((224,224)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                         std=[0.229, 0.224, 0.225])\n])\n\nval_transform= transforms.Compose([\n    transforms.Resize((224,224)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                         std=[0.229, 0.224, 0.225])\n])\n\ntest_transform= transforms.Compose([\n    transforms.Resize((224,224)),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                         std=[0.229, 0.224, 0.225])\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:24.096253Z","iopub.execute_input":"2025-08-17T08:50:24.096554Z","iopub.status.idle":"2025-08-17T08:50:24.108239Z","shell.execute_reply.started":"2025-08-17T08:50:24.096510Z","shell.execute_reply":"2025-08-17T08:50:24.107480Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"!ls /kaggle/input/chest-xray-pneumonia","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:24.109011Z","iopub.execute_input":"2025-08-17T08:50:24.109244Z","iopub.status.idle":"2025-08-17T08:50:24.253543Z","shell.execute_reply.started":"2025-08-17T08:50:24.109226Z","shell.execute_reply":"2025-08-17T08:50:24.252497Z"}},"outputs":[{"name":"stdout","text":"chest_xray\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"!pwd","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:24.256143Z","iopub.execute_input":"2025-08-17T08:50:24.256404Z","iopub.status.idle":"2025-08-17T08:50:24.385317Z","shell.execute_reply.started":"2025-08-17T08:50:24.256381Z","shell.execute_reply":"2025-08-17T08:50:24.384651Z"}},"outputs":[{"name":"stdout","text":"/kaggle/working\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"train_dir= \"/kaggle/input/chest-xray-pneumonia/chest_xray/train\"\nval_dir= \"/kaggle/input/chest-xray-pneumonia/chest_xray/val\"\ntest_dir= \"/kaggle/input/chest-xray-pneumonia/chest_xray/test\"\n\ntrain_data= datasets.ImageFolder(root=train_dir, transform= train_transform)\nval_data= datasets.ImageFolder(root= val_dir, transform= val_transform)\ntest_data= datasets.ImageFolder(root= test_dir, transform= test_transform)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:24.386240Z","iopub.execute_input":"2025-08-17T08:50:24.386511Z","iopub.status.idle":"2025-08-17T08:50:29.409188Z","shell.execute_reply.started":"2025-08-17T08:50:24.386486Z","shell.execute_reply":"2025-08-17T08:50:29.408563Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"len(train_data), len(val_data), len(test_data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:29.409913Z","iopub.execute_input":"2025-08-17T08:50:29.410110Z","iopub.status.idle":"2025-08-17T08:50:29.415445Z","shell.execute_reply.started":"2025-08-17T08:50:29.410095Z","shell.execute_reply":"2025-08-17T08:50:29.414968Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"(5216, 16, 624)"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"train_loader= DataLoader(train_data, shuffle=True, batch_size=32, num_workers=2)\nval_loader= DataLoader(val_data, shuffle=False, batch_size=32, num_workers=2)\ntest_loader= DataLoader(test_data, shuffle=False, batch_size=32, num_workers=2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:29.416114Z","iopub.execute_input":"2025-08-17T08:50:29.416376Z","iopub.status.idle":"2025-08-17T08:50:29.429081Z","shell.execute_reply.started":"2025-08-17T08:50:29.416358Z","shell.execute_reply":"2025-08-17T08:50:29.428349Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"for image, label in train_loader:\n    print(image.shape, label.shape)\n    break","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:29.429749Z","iopub.execute_input":"2025-08-17T08:50:29.429943Z","iopub.status.idle":"2025-08-17T08:50:31.179296Z","shell.execute_reply.started":"2025-08-17T08:50:29.429919Z","shell.execute_reply":"2025-08-17T08:50:31.178401Z"}},"outputs":[{"name":"stdout","text":"torch.Size([32, 3, 224, 224]) torch.Size([32])\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"model= models.resnet18(weights=None)\nmodel=model.to(device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:31.180353Z","iopub.execute_input":"2025-08-17T08:50:31.180619Z","iopub.status.idle":"2025-08-17T08:50:31.563786Z","shell.execute_reply.started":"2025-08-17T08:50:31.180590Z","shell.execute_reply":"2025-08-17T08:50:31.563167Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"model.fc= nn.Linear(model.fc.in_features, 2).to(device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:31.564469Z","iopub.execute_input":"2025-08-17T08:50:31.564750Z","iopub.status.idle":"2025-08-17T08:50:31.569347Z","shell.execute_reply.started":"2025-08-17T08:50:31.564725Z","shell.execute_reply":"2025-08-17T08:50:31.568737Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"loss_function= nn.CrossEntropyLoss()\noptimizer= torch.optim.Adam(model.parameters(), lr=0.0001, weight_decay=1e-4)\nscheduler= torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode=\"min\", factor=0.5, patience= 3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:31.570038Z","iopub.execute_input":"2025-08-17T08:50:31.570235Z","iopub.status.idle":"2025-08-17T08:50:31.580192Z","shell.execute_reply.started":"2025-08-17T08:50:31.570219Z","shell.execute_reply":"2025-08-17T08:50:31.579646Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"def train(dataloader, model, loss_function, optimizer):\n    model.train()\n    total_loss=0\n\n    for batch, (image, label) in enumerate(dataloader):\n        image, label= image.to(device), label.to(device)\n        prediction= model(image)\n        loss= loss_function(prediction, label)\n        loss.backward()\n        optimizer.step()\n        optimizer.zero_grad()\n\n        total_loss+= loss\n    avg_loss= total_loss/len(dataloader)\n    print(f\"Training Average Loss: {avg_loss:.4f}\")\n\n    \n        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:31.580941Z","iopub.execute_input":"2025-08-17T08:50:31.581180Z","iopub.status.idle":"2025-08-17T08:50:31.591849Z","shell.execute_reply.started":"2025-08-17T08:50:31.581158Z","shell.execute_reply":"2025-08-17T08:50:31.591279Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"val_accuracy= Accuracy(task=\"multiclass\", num_classes=2).to(device)\n\ndef validate(dataloader, model, loss_function):\n    model.eval()\n    total_loss=0\n    val_accuracy.reset()\n\n    with torch.no_grad():\n        for image, label in dataloader:\n            image, label= image.to(device), label.to(device)\n            prediction= model(image)\n            loss= loss_function(prediction, label)\n            total_loss+= loss\n\n            val_accuracy.update(prediction, label)\n            \n        avg_loss= total_loss/ len(dataloader)\n        accuracy= val_accuracy.compute()*100\n        print(f\"Validation Loss: {avg_loss:.4f}\")\n        print(f\"Validation Accuracy: {accuracy:.2f}\")\n\n    return avg_loss","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:31.594207Z","iopub.execute_input":"2025-08-17T08:50:31.594746Z","iopub.status.idle":"2025-08-17T08:50:31.608382Z","shell.execute_reply.started":"2025-08-17T08:50:31.594728Z","shell.execute_reply":"2025-08-17T08:50:31.607874Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"test_accuracy= Accuracy(task=\"multiclass\", num_classes=2).to(device)\n\ndef test(dataloader, model, loss_function):\n    model.eval()\n    total_loss=0\n    val_accuracy.reset()\n\n    with torch.no_grad():\n        for image, label in dataloader:\n            image= image.to(device)  # shape: (batch_size, C, H, W)\n            label= label.to(device)  # shape: (batch_size,)\n            prediction= model(image)\n            loss= loss_function(prediction, label)\n            total_loss+= loss\n\n            test_accuracy.update(prediction, label)\n\n        avg_loss= total_loss/ len(dataloader)\n        accuracy= test_accuracy.compute()*100\n    print(f\"Test Loss: {avg_loss:.4f}\")\n    print(f\"Test Accuracy: {accuracy:.2f}\")\n\n    return accuracy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:31.609206Z","iopub.execute_input":"2025-08-17T08:50:31.609637Z","iopub.status.idle":"2025-08-17T08:50:31.615499Z","shell.execute_reply.started":"2025-08-17T08:50:31.609619Z","shell.execute_reply":"2025-08-17T08:50:31.614969Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"epochs= 30\nfor epoch in range(epochs):\n    print(f\"\\nEpoch {epoch+1}/{epochs}\")\n    train(train_loader, model, loss_function, optimizer)\n    val_loss= validate(val_loader, model, loss_function)\n    scheduler.step(val_loss)\n\ntest(test_loader, model, loss_function)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-17T08:50:31.616270Z","iopub.execute_input":"2025-08-17T08:50:31.616496Z","iopub.status.idle":"2025-08-17T09:13:03.111314Z","shell.execute_reply.started":"2025-08-17T08:50:31.616473Z","shell.execute_reply":"2025-08-17T09:13:03.110568Z"}},"outputs":[{"name":"stdout","text":"\nEpoch 1/30\nTraining Average Loss: 0.1709\nValidation Loss: 0.4438\nValidation Accuracy: 68.75\n\nEpoch 2/30\nTraining Average Loss: 0.0696\nValidation Loss: 0.2631\nValidation Accuracy: 87.50\n\nEpoch 3/30\nTraining Average Loss: 0.0439\nValidation Loss: 0.1238\nValidation Accuracy: 100.00\n\nEpoch 4/30\nTraining Average Loss: 0.0340\nValidation Loss: 0.2847\nValidation Accuracy: 87.50\n\nEpoch 5/30\nTraining Average Loss: 0.0375\nValidation Loss: 0.0396\nValidation Accuracy: 100.00\n\nEpoch 6/30\nTraining Average Loss: 0.0184\nValidation Loss: 0.5591\nValidation Accuracy: 68.75\n\nEpoch 7/30\nTraining Average Loss: 0.0128\nValidation Loss: 0.0462\nValidation Accuracy: 100.00\n\nEpoch 8/30\nTraining Average Loss: 0.0156\nValidation Loss: 0.1835\nValidation Accuracy: 87.50\n\nEpoch 9/30\nTraining Average Loss: 0.0096\nValidation Loss: 0.6022\nValidation Accuracy: 75.00\n\nEpoch 10/30\nTraining Average Loss: 0.0048\nValidation Loss: 0.3762\nValidation Accuracy: 81.25\n\nEpoch 11/30\nTraining Average Loss: 0.0015\nValidation Loss: 0.3697\nValidation Accuracy: 87.50\n\nEpoch 12/30\nTraining Average Loss: 0.0022\nValidation Loss: 0.2311\nValidation Accuracy: 87.50\n\nEpoch 13/30\nTraining Average Loss: 0.0014\nValidation Loss: 0.2583\nValidation Accuracy: 87.50\n\nEpoch 14/30\nTraining Average Loss: 0.0011\nValidation Loss: 0.3182\nValidation Accuracy: 87.50\n\nEpoch 15/30\nTraining Average Loss: 0.0010\nValidation Loss: 0.1854\nValidation Accuracy: 93.75\n\nEpoch 16/30\nTraining Average Loss: 0.0006\nValidation Loss: 0.2722\nValidation Accuracy: 87.50\n\nEpoch 17/30\nTraining Average Loss: 0.0016\nValidation Loss: 0.2433\nValidation Accuracy: 87.50\n\nEpoch 18/30\nTraining Average Loss: 0.0006\nValidation Loss: 0.2742\nValidation Accuracy: 87.50\n\nEpoch 19/30\nTraining Average Loss: 0.0025\nValidation Loss: 0.3224\nValidation Accuracy: 87.50\n\nEpoch 20/30\nTraining Average Loss: 0.0007\nValidation Loss: 0.4158\nValidation Accuracy: 87.50\n\nEpoch 21/30\nTraining Average Loss: 0.0003\nValidation Loss: 0.4379\nValidation Accuracy: 87.50\n\nEpoch 22/30\nTraining Average Loss: 0.0004\nValidation Loss: 0.6308\nValidation Accuracy: 75.00\n\nEpoch 23/30\nTraining Average Loss: 0.0005\nValidation Loss: 0.5330\nValidation Accuracy: 87.50\n\nEpoch 24/30\nTraining Average Loss: 0.0005\nValidation Loss: 0.4519\nValidation Accuracy: 87.50\n\nEpoch 25/30\nTraining Average Loss: 0.0004\nValidation Loss: 0.3805\nValidation Accuracy: 87.50\n\nEpoch 26/30\nTraining Average Loss: 0.0003\nValidation Loss: 0.4203\nValidation Accuracy: 87.50\n\nEpoch 27/30\nTraining Average Loss: 0.0005\nValidation Loss: 0.4769\nValidation Accuracy: 87.50\n\nEpoch 28/30\nTraining Average Loss: 0.0004\nValidation Loss: 0.4963\nValidation Accuracy: 87.50\n\nEpoch 29/30\nTraining Average Loss: 0.0004\nValidation Loss: 0.5080\nValidation Accuracy: 87.50\n\nEpoch 30/30\nTraining Average Loss: 0.0003\nValidation Loss: 0.4789\nValidation Accuracy: 87.50\nTest Loss: 1.5572\nTest Accuracy: 76.92\n","output_type":"stream"},{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"tensor(76.9231, device='cuda:0')"},"metadata":{}}],"execution_count":16}]}